// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var App;

  App = angular.module('ReaderProjectApp');

  App.controller('MainCtrl', function($scope, $http, $timeout, $rootScope, $sanitize, Restangular) {
    var checkNew, earlyUpdateTime, getByTimeline, lastUpdateTime, loadNew, loadOld, minNumber, newReadyLoad, oldReadyLoad;
    lastUpdateTime = 0;
    earlyUpdateTime = 0;
    minNumber = 20;
    $scope.loading = false;
    newReadyLoad = [];
    oldReadyLoad = [];
    $scope.items = [];
    $scope.unread = 0;
    $scope.replaceUrl = function(scope) {
      scope.item.urll = scope.item.url;
      scope.item.url = scope.item.uri;
      return $timeout(function() {
        return scope.item.url = scope.item.urll;
      }, 1000);
    };
    $scope.collect = function(scope) {
      var collect;
      collect = Restangular.one('collection', scope.item.summaryId);
      if (scope.item.collection) {
        return collect.remove().then(function(result) {
          return scope.item.collection = false;
        });
      } else {
        return collect.post().then(function(result) {
          return scope.item.collection = true;
        });
      }
    };
    $scope.like = function(scope) {
      var like;
      like = Restangular.one('liked', scope.item.summaryId);
      if (scope.item.liked) {
        return like.remove().then(function(result) {
          return scope.item.liked = false;
        });
      } else {
        return like.post().then(function(result) {
          return scope.item.liked = true;
        });
      }
    };
    $scope.follow = function(event, scope) {
      var ele, id, tag;
      ele = event.target;
      id = ele.getAttribute('data-id');
      tag = Restangular.one('user/tag', id);
      if (!ele.classList.contains('followed')) {
        return tag.post().then(function(result) {
          if (result.message === '成功') {
            return ele.classList.add('followed');
          }
        });
      } else {
        return tag.remove().then(function(result) {
          if (result.message === '成功') {
            return ele.classList.remove('followed');
          }
        });
      }
    };
    $scope.getComment = function(scope) {
      if (scope.item.showComments) {
        scope.item.showComments = false;
        return scope.item.commentInfo = "展开评论";
      } else {
        return Restangular.all("comments/" + scope.item.summaryId + "/0/10").getList().then(function(value) {
          scope.item.comments = value;
          scope.item.showComments = true;
          return scope.item.commentInfo = "收起评论";
        }, function(response) {
          return console.log(response);
        });
      }
    };
    $scope.addComment = function(scope) {
      var comment, summaryId;
      summaryId = scope.item.summaryId;
      comment = scope.item.inputComment;
      if (comment) {
        return Restangular.all("comments/" + summaryId).post({
          articleId: summaryId,
          atList: [],
          comment: scope.item.inputComment
        }).then(function(value) {
          scope.item.inputComment = '';
          scope.focus = false;
          scope.item.commentsNumber += 1;
          return Restangular.all("comments/" + summaryId + "/0/10").getList().then(function(value) {
            scope.item.comments = value;
            scope.item.showComments = true;
            return scope.item.commentInfo = "收起评论";
          }, function(response) {
            return console.log(response);
          });
        }, function(response) {
          return console.log(response);
        });
      }
    };
    $scope.load = function(mode) {
      var i, item, _i, _len, _results;
      if (mode == null) {
        mode = 'new';
      }
      if (mode === 'new') {
        if (newReadyLoad.length === 0) {
          loadNew();
          return;
        }
        for (_i = 0, _len = newReadyLoad.length; _i < _len; _i++) {
          item = newReadyLoad[_i];
          $scope.items.unshift({
            id: item.summary.summaryId
          });
        }
        newReadyLoad = [];
        if ($scope.items.length < minNumber) {
          return $scope.load('old');
        }
      } else if (mode === 'old') {
        if (oldReadyLoad.length === 0) {
          loadOld();
          return;
        }
        i = 19;
        _results = [];
        while (i--) {
          item = oldReadyLoad.pop();
          if (item) {
            _results.push($scope.items.push({
              id: item.summary.summaryId
            }));
          } else {
            break;
          }
        }
        return _results;
      }
    };
    getByTimeline = function(fromTime, toTime, callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (fromTime >= toTime) {
        return false;
      }
      return Restangular.all("global/summary/0/10").getList().then(callback, function(response) {
        return console.log(response);
      });
    };
    loadOld = function() {
      var fromTime, toTime;
      if ($scope.loading) {
        return;
      }
      $scope.loading = true;
      toTime = earlyUpdateTime;
      earlyUpdateTime -= 24 * 60 * 60 * 1000;
      fromTime = earlyUpdateTime;
      return getByTimeline(fromTime, toTime, function(value) {
        var item, _i, _len;
        for (_i = 0, _len = value.length; _i < _len; _i++) {
          item = value[_i];
          oldReadyLoad.unshift(item);
        }
        /*
        等同于
        for item in value by -1
            oldReadyLoad.push item
        */

        $scope.loading = false;
        if (oldReadyLoad.length < minNumber) {
          return $timeout(loadOld);
        } else {
          return $scope.load('old');
        }
      });
    };
    loadNew = function() {
      var fromTime, nowTime, toTime;
      if ($scope.loading) {
        return;
      }
      $scope.loading = true;
      nowTime = new Date();
      toTime = nowTime.getTime();
      nowTime.setDate(nowTime.getDate() - 1);
      fromTime = lastUpdateTime === 0 ? nowTime.getTime() : lastUpdateTime;
      lastUpdateTime = toTime;
      if (fromTime < earlyUpdateTime || earlyUpdateTime === 0) {
        earlyUpdateTime = fromTime;
      }
      return getByTimeline(fromTime, toTime, function(value) {
        var item, _i, _len;
        for (_i = 0, _len = value.length; _i < _len; _i++) {
          item = value[_i];
          newReadyLoad.unshift(item);
        }
        /*
        等同于
        for item in value by -1
            newReadyLoad.push item
        */

        $scope.loading = false;
        if (newReadyLoad.length > 0) {
          return $scope.load('new');
        } else {
          return $scope.load('old');
        }
      });
    };
    /*
    $scope.safeInput = (scope,event)->
        console.log scope.item.inputComment
        temp = scope.item.inputComment
        temp = temp.replace /<[\/\s]*(?:(?!div|br)[^>]*)>/g,''
        temp = temp.replace /<\s*div[^>]*>/g,'<div>'
        temp = temp.replace /<[\/\s]*div[^>]*>/g,'</div>'
        scope.item.inputComment = temp
    */

    $scope.pasteHandler = function(e) {
      var clipboard, ele, frag, lastNode, node, range, sel, text;
      e = e.originalEvent;
      clipboard = e.clipboardData;
      text = clipboard.getData('text/plain');
      sel = window.getSelection();
      if (sel.getRangeAt && sel.rangeCount) {
        range = sel.getRangeAt(0);
        range.deleteContents();
        ele = document.createElement('div');
        ele.innerHTML = text;
        frag = document.createDocumentFragment();
        while (node = ele.firstChild) {
          lastNode = frag.appendChild(node);
        }
        range.insertNode(frag);
        if (lastNode) {
          range = range.cloneRange();
          range.setStartAfter(lastNode);
          range.collapse(true);
          sel.removeAllRanges();
          sel.addRange(range);
        }
      }
      return false;
    };
    checkNew = function() {
      return Restangular.all("timeline/ids/" + lastUpdateTime + "/" + ((new Date).getTime())).getList().then(function(result) {
        $timeout(function() {
          return $scope.unread = result.length;
        }, 0);
        return $timeout(checkNew, 1000 * 60);
      });
    };
    $scope.loadOld = loadOld;
    $scope.loadNew = loadNew;
    $scope.load();

    $timeout(checkNew, 1000 * 60);
    return $rootScope.setBackground();
  });

}).call(this);
