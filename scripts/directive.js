// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var App,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  App = angular.module('ReaderProjectApp');

  App.directive('rdPaste', function($timeout, $parse) {
    return function(scope, element, attrs) {
      var fn;
      fn = $parse(attrs['rdPaste']);
      return element.on('paste', function(event) {
        return $timeout(function() {
          return scope.$apply(function() {
            return fn(scope, {
              $event: event
            });
          });
        });
      });
    };
  });

  App.directive('rdBeforePaste', function($timeout, $parse) {
    return function(scope, element, attrs) {
      var fn;
      fn = $parse(attrs['rdBeforePaste']);
      return element.on('paste', function(event) {
        return scope.$apply(function() {
          return fn(scope, {
            $event: event
          });
        });
      });
    };
  });

  App.directive('rdContenteditableInput', function($timeout, $parse) {
    return function(scope, element, attrs) {
      var fn;
      fn = $parse(attrs['rdContenteditableInput']);
      return element.on('blur keyup change paste', function() {
        return $timeout(function() {
          return scope.$apply(function() {
            return fn(scope, {
              $event: event
            });
          });
        });
      });
    };
  });

  App.directive('card', function(Restangular, $rootScope) {
    return {
      restrict: 'E',
      templateUrl: 'template/card.directive',
      replace: true,
      link: function(scope, element, attrs) {
        var id;
        id = scope.item.id;
        if (id) {
          Restangular.one('summary', id).get().then(function(summary) {
            var tag, _i, _len, _ref, _ref1;
            _.extend(scope.item, summary.summary);
            _ref = summary.tag;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tag = _ref[_i];
              if ($rootScope.user.logged && (_ref1 = tag.tagName, __indexOf.call($rootScope.user.followedTag, _ref1) >= 0)) {
                tag.followed = true;
              }
            }
            return _.extend(scope.item, {
              tag: summary.tag
            });
          }, function(response) {
            if (response.status === 404) {
              return delete scope.$parent.items[scope.item.index];
            }
          });
          Restangular.one('uri', id).get().then(function(uri) {
            return _.extend(scope.item, uri);
          });
          return Restangular.one('comments', id).getList('sum').then(function(result) {
            var commentNumber;
            commentNumber = parseInt(result.message);
            if ($rootScope.user.logged) {
              Restangular.one('collection', id).get().then(function(collection) {
                return scope.item.collection = collection.message === true;
              });
              Restangular.one('liked', id).get().then(function(liked) {
                return scope.item.liked = liked.message === true;
              });
              scope.item.commentInfo = '展开评论';
              return scope.item.commentNumber = commentNumber;
            } else {
              scope.item.commentInfo = '展开评论';
              return scope.item.commentNumber = commentNumber;
            }
          });
        }
      }
    };
  });

  App.directive('rdAutoHeight', function($parse) {
    return function(scope, element, attrs) {
      /*
      min = if attrs['rdAutoHeight'] and not isNaN attrs['rdAutoHeight'] then attrs['rdAutoHeight'] else element[0].scrollHeight
      borderWidth = element.outerHeight() - element.innerHeight()
      element.on 'input', (event)->
          element.height 0
          element.height borderWidth + Math.max(element[0].scrollHeight, min)
      */

      var min;
      min = attrs['rdAutoHeight'] && !isNaN(attrs['rdAutoHeight']) ? attrs['rdAutoHeight'] : element[0].rows;
      element.attr('rows', min);
      return element.on('input', function(event) {
        var rows;
        rows = element.val().split('\n').length;
        return element.attr('rows', Math.max(rows, min));
      });
    };
  });

  App.directive('contenteditable', function() {
    return {
      restrict: 'A',
      require: '?ngModel',
      link: function(scope, element, attrs, ngModel) {
        var read;
        if (ngModel) {
          ngModel.$render = function(value) {
            return element.html(ngModel.$viewValue || '');
          };
          read = function() {
            var html;
            html = element.html();
            if (attrs.stripBr && html === '<br>') {
              html = '';
            }
            return ngModel.$setViewValue(html);
          };
          element.on('blur keyup change', function() {
            return scope.$apply(read);
          });
          return read();
        }
      }
    };
  });

  App.directive('whenScrolled', function($parse, $window) {
    return function(scope, element, attrs) {
      $window = angular.element($window);
      return $window.on('scroll', function(event) {
        var delta, elementHeight, scrollAmount;
        elementHeight = element.height();
        scrollAmount = $window.scrollTop();
        delta = 1000;
        if (elementHeight - (scrollAmount + delta) < 0) {
          console.log('ok');
          return scope.$apply(attrs.whenScrolled);
        }
      });
    };
  });

}).call(this);
